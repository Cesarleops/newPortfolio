---
export interface Props {
	title: string;
}

const { title } = Astro.props;

---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="My portfolio">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/pageicon.png" />
		<title>{title}</title>
		<meta name="view-transition" content="same-origin" />
	</head>
	<body>
		<slot />		
	</body>
</html>
<style is:global>
	
	@font-face {
	  font-family: 'Noir Pro';
	  src: url('../../fonts/noirpro.otf') format('opentype');
	  font-display: swap;
	}
  
	@font-face {
	  font-family: 'Noir Pro Light';
	  src: url('../../fonts/noirprolight.otf') format('opentype');
	  font-display: swap;
	}
	


	

	::view-transition-old(experience-title) {
		display:none
	}
	::view-transition-new(experience-title) {
		animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-in;
	}


	::view-transition-old(projects-title) {
		display: none;
	}
	::view-transition-new(projects-title) {
		animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-in;
	}






@keyframes slide-in {
  from {
    transform: translateY(-70px);
  }
}

@keyframes slide-out {
  to {
    transform: translateY(-70px);
  }
}




	
</style>

<script type="text/javascript">
	let prevPageScroll = 0


	if (document.startViewTransition){
		window.navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url)		
			const toPath = toUrl.pathname 
			if (location.origin !== toUrl.origin) return
			//Aca reviso si esta yendo hacia la pagina o volviendo de ella
			if (toPath !== '/') {
				event.intercept({
				async handler () {
					const response = await fetch(toPath) 
					const text = await response.text()
					const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)
					prevPageScroll = document.documentElement.scrollTop	
	
					document.startViewTransition(() => {
					
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
						
					})
				}
			})
			} else {
				event.intercept({
				async handler () {
					const response = await fetch(toPath) 
					const text = await response.text()
					const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)
				
					document.startViewTransition(() => {
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
						if (prevPageScroll) {
          					document.documentElement.scrollTop = prevPageScroll
						 }	
					})
			}
		})
			}})
	}
   	
</script>