---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html class="scroll-smooth" lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/car.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="view-transition" content="same-origin" />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>

<style is:global>

	@font-face {
		font-family:'Noir Pro' ;
		src: url('../../fonts/noirpro.otf') format('opentype');
		
	}


	@font-face {
		font-family:'Noir Pro Light' ;
		src: url('../../fonts/noirprolight.otf') format('opentype');
		
	}

	@keyframes fade-in {
		from { opacity: 0; }
	}

	
</style>

<script>
		if (document.startViewTransition) {
		window.navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url)
	
			// es una página externa? si es así, lo ignoramos
			if (location.origin !== toUrl.origin) return
	
			// si es una navegación en el mismo dominio (origen)
			event.intercept({
				async handler () {
					// vamos a cargar la página de destino
					// utilizando un fetch para obtener el HTML
					const response = await fetch(toUrl.pathname) // /clean-code
					const text = await response.text()
					// quedarnos sólo con el contenido del html dentro de la etiqueta body
					// usamos un regex para extraerlo
					const [, data] = text.match(/<body>([\s\S]*)<\/body>/i)
	
					// utilizar la api de View Transition API
					document.startViewTransition(() => {
						// el scroll hacia arriba del todo
						document.body.innerHTML = data
						document.documentElement.scrollTop = 0
						
						
						
					})
				}
			})
		})
	}
</script>